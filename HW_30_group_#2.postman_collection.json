{
	"info": {
		"_postman_id": "c853a803-5416-46ab-85f1-7ce730d24c78",
		"name": "HW_30_group_#2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//запрос\r",
							"//тест на код 200 - в тесте к коллекции\r",
							"//проверка на правильный string ниже \r",
							"\r",
							"pm.test(\"Right_Answer\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('This is the first responce from server!');\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// отправяем запрос\r",
							"//тест на код 200 - в тесте к коллекции\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"let jsonData_name = jsonData.name\r",
							"let jsonData_age = jsonData.age\r",
							"let jsonData_salary = jsonData.salary\r",
							"let resp_salary_1_5 = jsonData.family.u_salary_1_5_year\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check_name\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData_name)).to.include('Den');\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check_age\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData_age)).to.include('41');\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check_salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData_salary)).to.include('5000');\r",
							"});\r",
							"\r",
							"//Спарсить request.\r",
							"let req = request.data\r",
							"let req_name = req.name\r",
							"let req_age = req.age\r",
							"let req_salary = req.salary\r",
							"let req_salary_1_5 = req.salary * 4\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check_name_req\", function () {    \r",
							"    pm.expect(req_name).to.eql(jsonData_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check_age_req\", function () {    \r",
							"    pm.expect(req_age).to.eql(jsonData_age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check_salary_req\", function () {    \r",
							"    pm.expect(Number(req_salary)).to.eql(jsonData_salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"salary_1_5_year\", function () {    \r",
							"    pm.expect(req_salary_1_5).to.eql(resp_salary_1_5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Den",
							"type": "default"
						},
						{
							"key": "age",
							"value": "41",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// отправяем запрос\r",
							"//тест на код 200 - в тесте к коллекции\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"let jsonData_pets_dog = jsonData.family.pets.dog\r",
							"\r",
							"//Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check_name_req\", function () {    \r",
							"    pm.expect(req.name).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check_age_req\", function () {    \r",
							"    pm.expect(req.age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check_salary_req\", function () {    \r",
							"    pm.expect(Number(req.salary)).to.eql(jsonData.salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check dog_name\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData_pets_dog)).to.include('name');\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check dog_age\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData_pets_dog)).to.include('age');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check dog_age_Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check dog_age_4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Den",
							"type": "default"
						},
						{
							"key": "age",
							"value": "41",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Den&age=41&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Den"
						},
						{
							"key": "age",
							"value": "41"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// отправяем запрос\r",
							"//тест на код 200 - в тесте к коллекции\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check_name_req\", function () {    \r",
							"    pm.expect(req.name).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check_age_req\", function () {    \r",
							"    pm.expect(Number(req.age)).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(req.salary)\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary_0\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(Number(req.salary));\r",
							"});\r",
							"\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary_0\", function () {\r",
							"    pm.expect(Number(jsonData.salary[1])).to.eql(req.salary * 2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary_0\", function () {\r",
							"    pm.expect(Number(jsonData.salary[2])).to.eql(req.salary * 3);\r",
							"});\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"// Передать в окружение переменную name\r",
							"// Передать в окружение переменную age\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"name\", 'Andry');\r",
							"pm.environment.set(\"age\", 39);\r",
							"pm.environment.set(\"salary\", 5000);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (var i = 0; i < jsonData.salary.length; ++i) {\r",
							"    console.log(jsonData.salary[i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Den",
							"type": "default"
						},
						{
							"key": "age",
							"value": "41",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_4?name=Den&age=41&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Den"
						},
						{
							"key": "age",
							"value": "41"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request\r",
							"//Вставить параметр age из окружения в age\r",
							"//Вставить параметр name из окружения в name\r",
							"//тест на код 200 - в тесте к коллекции\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"let req = request.data\r",
							"\r",
							"//Спарсить request.\r",
							"let age = jsonData.person.u_name\r",
							"// console.log(age[2])\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check_start_qa_salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('start_qa_salary');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check_salary_after_6_months\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check_salary_after_12_months\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check_salary_after_1.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check_salary_after_3.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_3.5_year');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check_person\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('person');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_start_qa_salary\", function () {    \r",
							"    pm.expect(Number(req.salary)).to.eql(jsonData.start_qa_salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_6_months\", function () {    \r",
							"    pm.expect(req.salary * 2).to.eql(jsonData.qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_12_months\", function () {    \r",
							"    pm.expect(req.salary * 2.7).to.eql(jsonData.qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_1.5_year\", function () {    \r",
							"pm.expect(req.salary * 3.3).to.eql(jsonData['qa_salary_after_1.5_year']);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_3.5_year\", function () {    \r",
							"pm.expect(req.salary * 3.8).to.eql(jsonData['qa_salary_after_3.5_years']);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_person\", function () {    \r",
							"    pm.expect(Number(req.salary)).to.eql(jsonData.person.u_name[1]);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check_u_age\", function () {    \r",
							"    pm.expect(Number(req.age)).to.eql(jsonData.person.u_age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_u_salary_5_years\", function () {    \r",
							"    pm.expect(req.salary * 4.2).to.eql(jsonData.person.u_salary_5_years);\r",
							"});\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (var key in jsonData.person) {\r",
							"    console.log(key + \": \" + jsonData.person[key])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}